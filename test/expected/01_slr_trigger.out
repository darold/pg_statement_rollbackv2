\set VERBOSITY default
\set ECHO all
LOAD 'pg_statement_rollback.so';
SET pg_statement_rollback.enabled = 1;
DROP SCHEMA IF EXISTS testrsl CASCADE;
NOTICE:  schema "testrsl" does not exist, skipping
CREATE SCHEMA testrsl;
SET search_path TO testrsl,public;
DROP TABLE IF EXISTS tbl_rsl;
NOTICE:  table "tbl_rsl" does not exist, skipping
\echo Setup table
Setup table
BEGIN;
    DROP TABLE IF EXISTS tbl_rsl;
NOTICE:  table "tbl_rsl" does not exist, skipping
    CREATE TABLE tbl_rsl(id integer, val varchar(256));
COMMIT;
\echo Setup triggers
Setup triggers
BEGIN;
DROP FUNCTION IF EXISTS trg_before_stmt();
NOTICE:  function trg_before_stmt() does not exist, skipping
DROP FUNCTION IF EXISTS trg_before_row();
NOTICE:  function trg_before_row() does not exist, skipping
DROP FUNCTION IF EXISTS trg_after_stmt();
NOTICE:  function trg_after_stmt() does not exist, skipping
DROP FUNCTION IF EXISTS trg_after_row();
NOTICE:  function trg_after_row() does not exist, skipping
CREATE FUNCTION trg_before_stmt() RETURNS TRIGGER AS $$
BEGIN
    raise notice 'trg_before_stmt';
    IF (TG_OP = 'DELETE') THEN
        RETURN old;
    ELSE
        RETURN new;
    END IF;
END;
$$ LANGUAGE plpgsql;
CREATE FUNCTION trg_before_row() RETURNS TRIGGER AS $$
BEGIN
    raise notice 'trg_before_row';
    IF (TG_OP = 'DELETE') THEN
        RETURN old;
    ELSE
        RETURN new;
    END IF;
END;
$$ LANGUAGE plpgsql;
CREATE FUNCTION trg_after_stmt() RETURNS TRIGGER AS $$
BEGIN
    raise notice 'trg_after_stmt';
    IF (TG_OP = 'DELETE') THEN
        RETURN old;
    ELSE
        RETURN new;
    END IF;
end;
$$ LANGUAGE plpgsql;
CREATE FUNCTION trg_after_row() RETURNS TRIGGER AS $$
BEGIN
    raise notice 'trg_after_row';
    IF (TG_OP = 'DELETE') THEN
        RETURN old;
    ELSE
        RETURN new;
    END IF;
end;
$$ LANGUAGE plpgsql;
CREATE FUNCTION trg_after_row() RETURNS TRIGGER AS $$
BEGIN
    raise notice 'trg_after_row';
    RETURN new;
end;
$$ LANGUAGE plpgsql;
ERROR:  function "trg_after_row" already exists with same argument types
CREATE OR REPLACE FUNCTION trg_after_row() RETURNS TRIGGER AS $$
BEGIN
    raise notice 'trg_after_row';
    RETURN new;
end;
$$ LANGUAGE plpgsql;
CREATE TRIGGER trg_before_upd_stmt BEFORE UPDATE ON tbl_rsl FOR EACH STATEMENT EXECUTE PROCEDURE trg_before_stmt();
CREATE TRIGGER trg_before_upd_row BEFORE UPDATE ON tbl_rsl FOR EACH ROW EXECUTE PROCEDURE trg_before_row();
CREATE TRIGGER trg_before_ins_stmt BEFORE INSERT ON tbl_rsl FOR EACH STATEMENT EXECUTE PROCEDURE trg_before_stmt();
CREATE TRIGGER trg_before_ins_row BEFORE INSERT ON tbl_rsl FOR EACH ROW EXECUTE PROCEDURE trg_before_row();
CREATE TRIGGER trg_before_del_stmt BEFORE DELETE ON tbl_rsl FOR EACH STATEMENT EXECUTE PROCEDURE trg_before_stmt();
CREATE TRIGGER trg_before_del_row BEFORE DELETE ON tbl_rsl FOR EACH ROW EXECUTE PROCEDURE trg_before_row();
CREATE TRIGGER trg_after_upd_stmt AFTER UPDATE ON tbl_rsl FOR EACH STATEMENT EXECUTE PROCEDURE trg_after_stmt();
CREATE TRIGGER trg_after_upd_row AFTER UPDATE ON tbl_rsl FOR EACH ROW EXECUTE PROCEDURE trg_after_row();
CREATE TRIGGER trg_after_ins_stmt AFTER INSERT ON tbl_rsl FOR EACH STATEMENT EXECUTE PROCEDURE trg_after_stmt();
CREATE TRIGGER trg_after_ins_row AFTER INSERT ON tbl_rsl FOR EACH ROW EXECUTE PROCEDURE trg_after_row();
CREATE TRIGGER trg_after_del_stmt AFTER DELETE ON tbl_rsl FOR EACH STATEMENT EXECUTE PROCEDURE trg_after_stmt();
CREATE TRIGGER trg_after_del_row AFTER DELETE ON tbl_rsl FOR EACH ROW EXECUTE PROCEDURE trg_after_row();
COMMIT;
\echo Test 1
Test 1
BEGIN;
    INSERT INTO tbl_rsl SELECT 1, 'line 1';
NOTICE:  trg_before_stmt
NOTICE:  trg_before_row
NOTICE:  trg_after_row
NOTICE:  trg_after_stmt
    INSERT INTO tbl_rsl SELECT 'error', 'line 2';
ERROR:  invalid input syntax for type integer: "error"
LINE 1: INSERT INTO tbl_rsl SELECT 'error', 'line 2';
                                   ^
    SELECT 1 as exp, COUNT(*) FROM tbl_rsl;
 exp | count 
-----+-------
   1 |     1
(1 row)

    SAVEPOINT s1;
    INSERT INTO tbl_rsl SELECT 2, 'line 2';
NOTICE:  trg_before_stmt
NOTICE:  trg_before_row
NOTICE:  trg_after_row
NOTICE:  trg_after_stmt
    SELECT 2 as exp, COUNT(*) FROM tbl_rsl;
 exp | count 
-----+-------
   2 |     2
(1 row)

    ROLLBACK TO s1;
    SAVEPOINT aze;
    SELECT 1 as exp, COUNT(*) FROM tbl_rsl;
 exp | count 
-----+-------
   1 |     1
(1 row)

    INSERT INTO tbl_rsl SELECT 'error', 'line 2';
ERROR:  invalid input syntax for type integer: "error"
LINE 1: INSERT INTO tbl_rsl SELECT 'error', 'line 2';
                                   ^
    ROLLBACK TO aze;
    SELECT * FROM tbl_rsl;
 id |  val   
----+--------
  1 | line 1
(1 row)

COMMIT;
\echo Test 2
Test 2
BEGIN;
    INSERT INTO tbl_rsl SELECT 'err', 'line 2';
ERROR:  invalid input syntax for type integer: "err"
LINE 1: INSERT INTO tbl_rsl SELECT 'err', 'line 2';
                                   ^
    INSERT INTO tbl_rsl SELECT 'err', 'line 2';
ERROR:  invalid input syntax for type integer: "err"
LINE 1: INSERT INTO tbl_rsl SELECT 'err', 'line 2';
                                   ^
    INSERT INTO tbl_rsl SELECT 'err', 'line 2';
ERROR:  invalid input syntax for type integer: "err"
LINE 1: INSERT INTO tbl_rsl SELECT 'err', 'line 2';
                                   ^
    INSERT INTO tbl_rsl SELECT 'err', 'line 2';
ERROR:  invalid input syntax for type integer: "err"
LINE 1: INSERT INTO tbl_rsl SELECT 'err', 'line 2';
                                   ^
    INSERT INTO tbl_rsl SELECT 'err', 'line 2';
ERROR:  invalid input syntax for type integer: "err"
LINE 1: INSERT INTO tbl_rsl SELECT 'err', 'line 2';
                                   ^
    INSERT INTO tbl_rsl SELECT 'err', 'line 2';
ERROR:  invalid input syntax for type integer: "err"
LINE 1: INSERT INTO tbl_rsl SELECT 'err', 'line 2';
                                   ^
    INSERT INTO tbl_rsl SELECT 'err', 'line 2';
ERROR:  invalid input syntax for type integer: "err"
LINE 1: INSERT INTO tbl_rsl SELECT 'err', 'line 2';
                                   ^
    INSERT INTO tbl_rsl SELECT 'err', 'line 2';
ERROR:  invalid input syntax for type integer: "err"
LINE 1: INSERT INTO tbl_rsl SELECT 'err', 'line 2';
                                   ^
    INSERT INTO tbl_rsl SELECT 'err', 'line 2';
ERROR:  invalid input syntax for type integer: "err"
LINE 1: INSERT INTO tbl_rsl SELECT 'err', 'line 2';
                                   ^
    INSERT INTO tbl_rsl SELECT 'err', 'line 2';
ERROR:  invalid input syntax for type integer: "err"
LINE 1: INSERT INTO tbl_rsl SELECT 'err', 'line 2';
                                   ^
    INSERT INTO tbl_rsl SELECT 'err', 'line 2';
ERROR:  invalid input syntax for type integer: "err"
LINE 1: INSERT INTO tbl_rsl SELECT 'err', 'line 2';
                                   ^
    INSERT INTO tbl_rsl SELECT 'err', 'line 2';
ERROR:  invalid input syntax for type integer: "err"
LINE 1: INSERT INTO tbl_rsl SELECT 'err', 'line 2';
                                   ^
    INSERT INTO tbl_rsl SELECT 'err', 'line 2';
ERROR:  invalid input syntax for type integer: "err"
LINE 1: INSERT INTO tbl_rsl SELECT 'err', 'line 2';
                                   ^
    INSERT INTO tbl_rsl SELECT 'err', 'line 2';
ERROR:  invalid input syntax for type integer: "err"
LINE 1: INSERT INTO tbl_rsl SELECT 'err', 'line 2';
                                   ^
    INSERT INTO tbl_rsl SELECT 'err', 'line 2';
ERROR:  invalid input syntax for type integer: "err"
LINE 1: INSERT INTO tbl_rsl SELECT 'err', 'line 2';
                                   ^
    INSERT INTO tbl_rsl SELECT 'err', 'line 2';
ERROR:  invalid input syntax for type integer: "err"
LINE 1: INSERT INTO tbl_rsl SELECT 'err', 'line 2';
                                   ^
    INSERT INTO tbl_rsl SELECT 'err', 'line 2';
ERROR:  invalid input syntax for type integer: "err"
LINE 1: INSERT INTO tbl_rsl SELECT 'err', 'line 2';
                                   ^
    INSERT INTO tbl_rsl SELECT 'err', 'line 2';
ERROR:  invalid input syntax for type integer: "err"
LINE 1: INSERT INTO tbl_rsl SELECT 'err', 'line 2';
                                   ^
    INSERT INTO tbl_rsl SELECT 'err', 'line 2';
ERROR:  invalid input syntax for type integer: "err"
LINE 1: INSERT INTO tbl_rsl SELECT 'err', 'line 2';
                                   ^
    INSERT INTO tbl_rsl SELECT 'err', 'line 2';
ERROR:  invalid input syntax for type integer: "err"
LINE 1: INSERT INTO tbl_rsl SELECT 'err', 'line 2';
                                   ^
    INSERT INTO tbl_rsl SELECT 'err', 'line 2';
ERROR:  invalid input syntax for type integer: "err"
LINE 1: INSERT INTO tbl_rsl SELECT 'err', 'line 2';
                                   ^
    INSERT INTO tbl_rsl SELECT i, 'line ' || i FROM generate_series(2, 10) i;
NOTICE:  trg_before_stmt
NOTICE:  trg_before_row
NOTICE:  trg_before_row
NOTICE:  trg_before_row
NOTICE:  trg_before_row
NOTICE:  trg_before_row
NOTICE:  trg_before_row
NOTICE:  trg_before_row
NOTICE:  trg_before_row
NOTICE:  trg_before_row
NOTICE:  trg_after_row
NOTICE:  trg_after_row
NOTICE:  trg_after_row
NOTICE:  trg_after_row
NOTICE:  trg_after_row
NOTICE:  trg_after_row
NOTICE:  trg_after_row
NOTICE:  trg_after_row
NOTICE:  trg_after_row
NOTICE:  trg_after_stmt
    UPDATE tbl_rsl SET id = id + 1;
NOTICE:  trg_before_stmt
NOTICE:  trg_before_row
NOTICE:  trg_before_row
NOTICE:  trg_before_row
NOTICE:  trg_before_row
NOTICE:  trg_before_row
NOTICE:  trg_before_row
NOTICE:  trg_before_row
NOTICE:  trg_before_row
NOTICE:  trg_before_row
NOTICE:  trg_before_row
NOTICE:  trg_after_row
NOTICE:  trg_after_row
NOTICE:  trg_after_row
NOTICE:  trg_after_row
NOTICE:  trg_after_row
NOTICE:  trg_after_row
NOTICE:  trg_after_row
NOTICE:  trg_after_row
NOTICE:  trg_after_row
NOTICE:  trg_after_row
NOTICE:  trg_after_stmt
    SELECT 10 as exp, COUNT(*) FROM tbl_rsl;
 exp | count 
-----+-------
  10 |    10
(1 row)

    SELECT * FROM tbl_rsl;
 id |   val   
----+---------
  2 | line 1
  3 | line 2
  4 | line 3
  5 | line 4
  6 | line 5
  7 | line 6
  8 | line 7
  9 | line 8
 10 | line 9
 11 | line 10
(10 rows)

    DELETE FROM tbl_rsl;
NOTICE:  trg_before_stmt
NOTICE:  trg_before_row
NOTICE:  trg_before_row
NOTICE:  trg_before_row
NOTICE:  trg_before_row
NOTICE:  trg_before_row
NOTICE:  trg_before_row
NOTICE:  trg_before_row
NOTICE:  trg_before_row
NOTICE:  trg_before_row
NOTICE:  trg_before_row
NOTICE:  trg_after_row
NOTICE:  trg_after_row
NOTICE:  trg_after_row
NOTICE:  trg_after_row
NOTICE:  trg_after_row
NOTICE:  trg_after_row
NOTICE:  trg_after_row
NOTICE:  trg_after_row
NOTICE:  trg_after_row
NOTICE:  trg_after_row
NOTICE:  trg_after_stmt
    SELECT 0 as exp, COUNT(*) FROM tbl_rsl;
 exp | count 
-----+-------
   0 |     0
(1 row)

COMMIT;
\echo Test 3
Test 3
BEGIN;
    SAVEPOINT s1;
    DO LANGUAGE plpgsql $$
        DECLARE i integer; j integer;
        BEGIN
            FOR i in SELECT * FROM generate_series(1, 3)
            LOOP
                FOR j IN SELECT * FROM generate_series(1, 3)
                LOOP
                    INSERT INTO tbl_rsl VALUES (i, j::varchar);

                    IF ((i+j) % 4 = 0) THEN
                        RAISE NOTICE 'UPDATE % %', i, j;
                        UPDATE tbl_rsl SET id = i*2, val = (j*3)::varchar WHERE id = i AND val = j::varchar;
                    END IF;
                    IF ((i+j) % 5 = 0) THEN
                        RAISE NOTICE 'DELETE % %', i, j;
                        DELETE FROM tbl_rsl WHERE id = i AND val = j::varchar;
                    END IF;
                END LOOP;
            END LOOP;
        END;
    $$;
NOTICE:  trg_before_stmt
NOTICE:  trg_before_row
NOTICE:  trg_after_row
NOTICE:  trg_after_stmt
NOTICE:  trg_before_stmt
NOTICE:  trg_before_row
NOTICE:  trg_after_row
NOTICE:  trg_after_stmt
NOTICE:  trg_before_stmt
NOTICE:  trg_before_row
NOTICE:  trg_after_row
NOTICE:  trg_after_stmt
NOTICE:  UPDATE 1 3
NOTICE:  trg_before_stmt
NOTICE:  trg_before_row
NOTICE:  trg_after_row
NOTICE:  trg_after_stmt
NOTICE:  trg_before_stmt
NOTICE:  trg_before_row
NOTICE:  trg_after_row
NOTICE:  trg_after_stmt
NOTICE:  trg_before_stmt
NOTICE:  trg_before_row
NOTICE:  trg_after_row
NOTICE:  trg_after_stmt
NOTICE:  UPDATE 2 2
NOTICE:  trg_before_stmt
NOTICE:  trg_before_row
NOTICE:  trg_after_row
NOTICE:  trg_after_stmt
NOTICE:  trg_before_stmt
NOTICE:  trg_before_row
NOTICE:  trg_after_row
NOTICE:  trg_after_stmt
NOTICE:  DELETE 2 3
NOTICE:  trg_before_stmt
NOTICE:  trg_before_row
NOTICE:  trg_after_row
NOTICE:  trg_after_stmt
NOTICE:  trg_before_stmt
NOTICE:  trg_before_row
NOTICE:  trg_after_row
NOTICE:  trg_after_stmt
NOTICE:  UPDATE 3 1
NOTICE:  trg_before_stmt
NOTICE:  trg_before_row
NOTICE:  trg_after_row
NOTICE:  trg_after_stmt
NOTICE:  trg_before_stmt
NOTICE:  trg_before_row
NOTICE:  trg_after_row
NOTICE:  trg_after_stmt
NOTICE:  DELETE 3 2
NOTICE:  trg_before_stmt
NOTICE:  trg_before_row
NOTICE:  trg_after_row
NOTICE:  trg_after_stmt
NOTICE:  trg_before_stmt
NOTICE:  trg_before_row
NOTICE:  trg_after_row
NOTICE:  trg_after_stmt
    SELECT * FROM tbl_rsl;
 id | val 
----+-----
  1 | 1
  1 | 2
  2 | 9
  2 | 1
  4 | 6
  6 | 3
  3 | 3
(7 rows)

    SELECT 7 as exp, COUNT(*) FROM tbl_rsl;
 exp | count 
-----+-------
   7 |     7
(1 row)

    ROLLBACK TO s1;
    SAVEPOINT aze;
    SELECT 0 as exp, COUNT(*) FROM tbl_rsl;
 exp | count 
-----+-------
   0 |     0
(1 row)

    SELECT ooops_error FROM tbl_rsl;
ERROR:  column "ooops_error" does not exist
LINE 1: SELECT ooops_error FROM tbl_rsl;
               ^
    ROLLBACK TO aze;
    SELECT 0 as exp, COUNT(*) FROM tbl_rsl;
 exp | count 
-----+-------
   0 |     0
(1 row)

COMMIT;
DROP SCHEMA testrsl CASCADE;
NOTICE:  drop cascades to 5 other objects
DETAIL:  drop cascades to table tbl_rsl
drop cascades to function trg_before_stmt()
drop cascades to function trg_before_row()
drop cascades to function trg_after_stmt()
drop cascades to function trg_after_row()
